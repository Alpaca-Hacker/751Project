#pragma kernel IntegrateAndStorePositions 
#pragma kernel SolveConstraints
#pragma kernel UpdateMesh
#pragma kernel DecayLambdas
#pragma kernel SolveVolumeConstraints
#pragma kernel UpdateVelocities
#pragma kernel DebugAndValidateParticles
#pragma kernel SolveGeneralCollisions

#define COLLIDER_TYPE_SPHERE 0
#define COLLIDER_TYPE_PLANE 1

struct SDFCollider
{
    float4 data1;
    float4 data2;
    int type;
    int _padding1, _padding2, _padding3;
};

struct Particle
{
    float4 positionAndInvMass; 
    float4 velocity;
    float4 force;
};

struct Constraint
{
    int particleA;
    int particleB;
    float restLength;
    float compliance;
    float lambda;
    int colourGroup;
};

struct VolumeConstraint
{
    int p1, p2, p3, p4;
    float restVolume;
    float compliance;
    float lambda;
};

// Buffers
RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<Constraint> constraints;
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float4> debugBuffer;
RWStructuredBuffer<VolumeConstraint> volumeConstraints;
RWStructuredBuffer<float3> previousPositions;
StructuredBuffer<SDFCollider> colliders;

// Parameters
float deltaTime;
float gravity;
float damping;
int particleCount;
int constraintCount;
float3 worldPosition;
int colliderCount;
int currentColourGroup;
float lambdaDecay;
int volumeConstraintCount;

float collisionCompliance;


// Thread group size
#define THREAD_GROUP_SIZE 64

// Utility functions for safe computation

// Checks for and corrects NaN/Infinity values in a float3
float3 ValidateFloat3(float3 v)
{
   
    if (any(isnan(v)) || any(isinf(v)))
    {
        return float3(0, 0, 0);
    }
    return v;
}

// float SafeLength(float3 v)
// {
//     float lenSq = dot(v, v);
//     return sqrt(max(lenSq, 1e-12));
// }

float SafeLength(float3 v)
{
    return length(v + 1e-9);
}

float3 SafeNormalize(float3 v)
{
    float len = SafeLength(v);
    return len > 1e-6 ? v / len : float3(0, 1, 0);
}

float3 ValidatePosition(float3 pos)
{
    // Check for NaN or infinity
    if (any(isnan(pos)) || any(isinf(pos)))
    {
        return float3(0, 1, 0); // Safe default position
    }
    
    // Clamp to reasonable world bounds
    const float MAX_WORLD_SIZE = 1000.0;
    return clamp(pos, -MAX_WORLD_SIZE, MAX_WORLD_SIZE);
}

// --- SDF Helper Functions ---

float sdf_sphere(float3 p, float3 center, float radius)
{
    return length(p - center) - radius;
}

float sdf_plane(float3 p, float3 normal, float distance)
{
    // distance is the plane's distance from the origin along its normal
    return dot(p, normal) - distance;
}


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void IntegrateAndStorePositions(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;
    
    Particle p = particles[index];
    
    previousPositions[index] =p.positionAndInvMass.xyz;
    
    if (p.positionAndInvMass.w <= 0.0) return;
    
    float3 gravityForce = float3(0, -gravity, 0);
    float3 acceleration = gravityForce * p.positionAndInvMass.w;
    p.velocity.xyz += acceleration * deltaTime;
    
    p.velocity.xyz *= (1.0 - damping * deltaTime);

    p.positionAndInvMass.xyz += p.velocity.xyz * deltaTime;

    p.positionAndInvMass.xyz = ValidateFloat3(p.positionAndInvMass.xyz);
    p.velocity.xyz = ValidateFloat3(p.velocity.xyz);
    
    particles[index] = p;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveConstraints(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)constraintCount) return;
    
    Constraint c = constraints[index];
    
    // Only solve constraints in the current colour group
    if (c.colourGroup != currentColourGroup) return;
    
    // Load particles
    Particle pA = particles[c.particleA];
    Particle pB = particles[c.particleB];
    
    // Skip if both particles are fixed
    if (pA.positionAndInvMass.w == 0.0 && pB.positionAndInvMass.w == 0.0) return;
    
    // Calculate constraint violation
    float3 delta = pB.positionAndInvMass.xyz - pA.positionAndInvMass.xyz;
    float currentLength = SafeLength(delta);
    
    // Skip degenerate constraints
    if (currentLength < 0.0001 || c.restLength < 0.0001) return;
    
    float3 direction = delta / currentLength;
    float constraintError = currentLength - c.restLength;
    
    // XPBD constraint solving
    // alphaTilde is calculated HERE using the constraint's compliance
    float alphaTilde = c.compliance / (deltaTime * deltaTime);
    
    // Ensure alphaTilde isn't too small
    alphaTilde = max(alphaTilde, 1e-10);
    
    // Calculate effective masses
    float wA = pA.positionAndInvMass.w;
    float wB = pB.positionAndInvMass.w;
    float totalInvMass = wA + wB;
    
    if (totalInvMass < 0.0001) return;
    
    // XPBD solving equation
    float deltaLambda = (-constraintError - alphaTilde * c.lambda) / 
                       (totalInvMass + alphaTilde + 1e-9);
    
    // Clamp delta lambda to prevent explosions
  //  float maxCorrection = c.restLength * 0.1; // 10% of rest length
 //   deltaLambda = clamp(deltaLambda, -maxCorrection, maxCorrection);
    
    // Update accumulated lambda
    c.lambda += deltaLambda;
    
    // Optional: clamp total lambda to prevent drift
   // c.lambda = clamp(c.lambda, -100.0, 100.0);
    
    // Apply position corrections
    float3 correction = deltaLambda * direction;

    float maxCorrectionMag = c.restLength * 0.2;
    float correctionMag = length(correction);
    if (correctionMag > maxCorrectionMag)
    {
        correction = correction * (maxCorrectionMag / correctionMag);
    }
    
    if (pA.positionAndInvMass.w > 0.0)
    {
        pA.positionAndInvMass.xyz -= correction * pA.positionAndInvMass.w;
        pA.positionAndInvMass.xyz = ValidateFloat3(pA.positionAndInvMass.xyz);
    }

    if (pB.positionAndInvMass.w > 0.0)
    {
        pB.positionAndInvMass.xyz += correction * pB.positionAndInvMass.w;
        pB.positionAndInvMass.xyz = ValidateFloat3(pB.positionAndInvMass.xyz);
    }
    
    // Write back
    particles[c.particleA] = pA;
    particles[c.particleB] = pB;
    constraints[index] = c;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void UpdateMesh(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;
    
    float3 position = particles[index].positionAndInvMass.xyz;
    
    // Validate position before writing to vertex buffer
    if (any(isnan(position)) || any(isinf(position)))
    {
        // Use a safe default position
        position = float3(0, 0, 0);
    }
    
    // Convert world position to local position for mesh
    vertices[index] = position;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void DecayLambdas(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)constraintCount) return;
    
    constraints[index].lambda *= lambdaDecay;
}

[numthreads(1, 1, 1)]
void DebugAndValidateParticles(uint3 id : SV_DispatchThreadID)
{
    // debugBuffer[0].x = nanCount
    // debugBuffer[0].y = infCount
    // debugBuffer[0].z = maxSpeed
    // debugBuffer[0].w = firstBadIndex
    
    // Reset debug values
    debugBuffer[0] = float4(0, 0, 0, -1);

    int nanCount = 0;
    int infCount = 0;
    float maxSpeedSq = 0;
    int firstBadIndex = -1;

    for (uint i = 0; i < (uint)particleCount; i++)
    {
        Particle p = particles[i];
        
        // Check for NaN
        if (any(isnan(p.positionAndInvMass.xyz)) || any(isnan(p.velocity)))
        {
            nanCount++;
            if (firstBadIndex == -1) firstBadIndex = i;
        }
        
        // Check for Infinity
        if (any(isinf(p.positionAndInvMass.xyz)) || any(isinf(p.velocity)))
        {
            infCount++;
            if (firstBadIndex == -1) firstBadIndex = i;
        }

        // Check for crazy velocities
        float speedSq = dot(p.velocity, p.velocity);
        if (speedSq > maxSpeedSq)
        {
            maxSpeedSq = speedSq;
        }
    }

    debugBuffer[0].x = nanCount;
    debugBuffer[0].y = infCount;
    debugBuffer[0].z = sqrt(maxSpeedSq);
    debugBuffer[0].w = firstBadIndex;
}


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveVolumeConstraints(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)volumeConstraintCount) return; // Add volumeConstraintCount parameter

    VolumeConstraint vc = volumeConstraints[index];
    Particle p1 = particles[vc.p1];
    Particle p2 = particles[vc.p2];
    Particle p3 = particles[vc.p3];
    Particle p4 = particles[vc.p4];

    float w1 = p1.positionAndInvMass.w;
    float w2 = p2.positionAndInvMass.w;
    float w3 = p3.positionAndInvMass.w;
    float w4 = p4.positionAndInvMass.w;
    float totalInvMass = w1 + w2 + w3 + w4;
    if (totalInvMass < 0.0001) return;

    // Calculate gradients of the volume constraint
    float3 grad1 = cross(p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad2 = cross(p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad3 = cross(p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad4 = -grad1 - grad2 - grad3;

    // Constraint error (current volume - rest volume)
    float currentVolume = dot(p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, cross(p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz)) / 6.0;
    float C = currentVolume - vc.restVolume;

    if (abs(C) < 0.0001 * vc.restVolume) return;

    // Clamp the constraint error to prevent explosions
    C = clamp(C, -vc.restVolume * 0.5, vc.restVolume * 0.5);
    
    // Weighted sum of squared gradient magnitudes
    float grad_sum = w1 * dot(grad1, grad1) + w2 * dot(grad2, grad2) + w3 * dot(grad3, grad3) + w4 * dot(grad4, grad4);

    float alphaTilde = vc.compliance / (deltaTime * deltaTime);
    if (grad_sum + alphaTilde < 0.0001) return;

    // Calculate delta lambda
    float deltaLambda = (-C - alphaTilde * vc.lambda) / (grad_sum + alphaTilde);
    
    vc.lambda += deltaLambda;

    // Apply corrections
    if (w1 > 0.0) p1.positionAndInvMass.xyz += w1 * deltaLambda * grad1;
    if (w2 > 0.0) p2.positionAndInvMass.xyz += w2 * deltaLambda * grad2;
    if (w3 > 0.0) p3.positionAndInvMass.xyz += w3 * deltaLambda * grad3;
    if (w4 > 0.0) p4.positionAndInvMass.xyz += w4 * deltaLambda * grad4;

    p1.positionAndInvMass.xyz = ValidatePosition(p1.positionAndInvMass.xyz);
    p2.positionAndInvMass.xyz = ValidatePosition(p2.positionAndInvMass.xyz);
    p3.positionAndInvMass.xyz = ValidatePosition(p3.positionAndInvMass.xyz);
    p4.positionAndInvMass.xyz = ValidatePosition(p4.positionAndInvMass.xyz);

    // Write back
    particles[vc.p1] = p1;
    particles[vc.p2] = p2;
    particles[vc.p3] = p3;
    particles[vc.p4] = p4;
    volumeConstraints[index] = vc;
}

// The clean, correct UpdateVelocities kernel
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void UpdateVelocities(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;

    Particle p = particles[index];
    if (p.positionAndInvMass.w <= 0.0) return;

    float3 prevPos = previousPositions[index];
    float3 newVelocity;
   
    if (deltaTime < 1e-6)
    {
        newVelocity = float3(0, 0, 0);
    }
    else
    {
        newVelocity = (p.positionAndInvMass.xyz - prevPos) / deltaTime;
    }
    
    // Optional but recommended safety clamp
    float maxSpeed = 20.0; 
    float speed = length(newVelocity);
    if (speed > maxSpeed)
    {
        newVelocity = (newVelocity / speed) * maxSpeed;
    }

    p.velocity.xyz = ValidateFloat3(newVelocity);
    particles[index] = p;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveGeneralCollisions(uint3 id : SV_DispatchThreadID)
{
    uint p_idx = id.x;
    if (p_idx >= (uint)particleCount) return;
    
    Particle p = particles[p_idx];
    if (p.positionAndInvMass.w <= 0.0) return;

    // Iterate through all colliders for this one particle
    for (int c_idx = 0; c_idx < colliderCount; c_idx++)
    {
        SDFCollider c = colliders[c_idx];
        
        float3 pos = p.positionAndInvMass.xyz;
        float penetration = 0;
        float3 normal = float3(0,1,0); // Default normal

        // --- 1. Calculate SDF distance and normal based on collider type ---
        if (c.type == COLLIDER_TYPE_SPHERE)
        {
            float3 center = c.data1.xyz;
            float radius = c.data1.w;
            penetration = sdf_sphere(pos, center, radius);
            if (penetration < 0)
            {
                normal = SafeNormalize(pos - center);
            }
        }
        else if (c.type == COLLIDER_TYPE_PLANE)
        {
            float3 plane_normal = c.data1.xyz;
            float plane_dist = c.data1.w;
            penetration = sdf_plane(pos, plane_normal, plane_dist);
            if (penetration < 0)
            {
                normal = plane_normal;
            }
        }

        // --- 2. If penetrating, solve the XPBD constraint ---
        if (penetration < 0)
        {
            p.positionAndInvMass.xyz -= penetration * normal; // Hard projection for simplicity and stability
            
            float3 vel = p.velocity.xyz;
            float vel_normal_comp = dot(vel, normal);

            // Only act if velocity is moving into the collider
            if (vel_normal_comp < 0)
            {
                float3 vel_tangent_comp = vel - vel_normal_comp * normal;

                // Apply friction
                float friction_coeff = 0.5;
                float friction_impulse = length(vel_tangent_comp) * friction_coeff;
                vel_tangent_comp = max(0, length(vel_tangent_comp) - friction_impulse) * SafeNormalize(vel_tangent_comp);

                // Apply restitution (bounciness)
                float restitution_coeff = 0.2;
                vel_normal_comp *= -restitution_coeff;

                // Combine back into new velocity
                p.velocity.xyz = vel_tangent_comp + vel_normal_comp * normal;
            }
        }
    }

    // Write the final corrected position back
    particles[p_idx] = p;
}

#pragma kernel SolveGeneralCollisions_XPBD

// A new buffer to store the corrections
RWStructuredBuffer<float3> collisionCorrections;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveGeneralCollisions_XPBD(uint3 id : SV_DispatchThreadID)
{
    uint p_idx = id.x;
    if (p_idx >= (uint)particleCount) return;

    Particle p = particles[p_idx];
    if (p.positionAndInvMass.w <= 0.0) return;
    
    // IMPORTANT: Clear the correction from the previous iteration/frame
    collisionCorrections[p_idx] = float3(0,0,0);
    int numCollisions = 0;

    // Iterate through all colliders
    for (int c_idx = 0; c_idx < colliderCount; c_idx++)
    {
        SDFCollider c = colliders[c_idx];
        float3 pos = p.positionAndInvMass.xyz;
        float penetration = 0;
        float3 normal = float3(0,1,0);

        if (c.type == COLLIDER_TYPE_SPHERE)
        {
            float3 center = c.data1.xyz;
            float radius = c.data1.w;
            penetration = sdf_sphere(pos, center, radius);
            if (penetration < 0)
            {
                normal = SafeNormalize(pos - center);
            }
        }
        else if (c.type == COLLIDER_TYPE_PLANE)
        {
            float3 plane_normal = c.data1.xyz;
            float plane_dist = c.data1.w;
            penetration = sdf_plane(pos, plane_normal, plane_dist);
            if (penetration < 0)
            {
                normal = plane_normal;
            }
        }

        if (penetration < 0)
        {
            // We have a collision. Calculate the positional correction needed.
            // For multiple penetrating colliders, we want to average the correction.
            
            // The correction is simply the negative penetration depth along the normal.
            collisionCorrections[p_idx] -= penetration * normal;
            numCollisions++;
        }
    }
    
    // Average the corrections if there were multiple collisions
    if (numCollisions > 1)
    {
        collisionCorrections[p_idx] /= numCollisions;
    }
}

#pragma kernel ApplyCollisionCorrections

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void ApplyCollisionCorrections(uint3 id : SV_DispatchThreadID)
{
    uint p_idx = id.x;
    if (p_idx >= (uint)particleCount) return;

    // Read the correction calculated by the solver
    float3 correction = collisionCorrections[p_idx];

    // If there was a correction to be made...
    if (dot(correction, correction) > 1e-6)
    {
        Particle p = particles[p_idx];
        
        // Apply the correction to the position
        p.positionAndInvMass.xyz += correction;
        
        // --- FRICTION (The Jitter/Creep Killer) ---
        // We can now calculate friction correctly.
        // The 'correction' vector represents the impulse that was applied.
        // Its magnitude is proportional to the normal force.
        float3 prev_pos_after_integration = previousPositions[p_idx];
        float3 vel_before_correction = (p.positionAndInvMass.xyz - correction - prev_pos_after_integration) / deltaTime;
        
        float3 normal = SafeNormalize(correction);
        float3 vel_tangent = vel_before_correction - dot(vel_before_correction, normal) * normal;

        float friction_coeff = 0.8; // High friction
        float normal_force_proxy = length(correction);
        float friction_magnitude = normal_force_proxy * friction_coeff;

        // Apply friction as a positional change that counteracts tangential velocity
        float3 friction_correction = -vel_tangent * deltaTime;
        if(length(friction_correction) > friction_magnitude)
        {
            friction_correction = SafeNormalize(friction_correction) * friction_magnitude;
        }

        p.positionAndInvMass.xyz += friction_correction;
        
        particles[p_idx] = p;
    }
}



#pragma kernel IntegrateAndStorePositions 
#pragma kernel SolveConstraints
#pragma kernel UpdateMesh
#pragma kernel DecayLambdas
#pragma kernel SolveVolumeConstraints
#pragma kernel UpdateVelocities
#pragma kernel DebugAndValidateParticles
#pragma kernel SolveGeneralCollisions
#pragma kernel ApplyCollisionCorrections
#pragma kernel ApplyGlobalDamping

#pragma target 4.5
#pragma float_precision(high)

#define COLLIDER_TYPE_SPHERE 0
#define COLLIDER_TYPE_PLANE 1
#define COLLIDER_TYPE_BOX 2
#define COLLIDER_TYPE_CYLINDER 3

struct SDFCollider
{
    float4 data1;
    float4 data2;
    float4 rotation;
    int type;
    int _padding1, _padding2, _padding3;
};

struct Particle
{
    float4 positionAndInvMass; 
    float4 velocity;
    float4 force;
};

struct Constraint
{
    int particleA;
    int particleB;
    float restLength;
    float compliance;
    float lambda;
    int colourGroup;
};

struct VolumeConstraint
{
    int p1, p2, p3, p4;
    float restVolume;
    float compliance;
    float lambda;
    float pressureMultiplier;
};

// Buffers
RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<Constraint> constraints;
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float4> debugBuffer;
RWStructuredBuffer<VolumeConstraint> volumeConstraints;
RWStructuredBuffer<float3> previousPositions;
StructuredBuffer<SDFCollider> colliders;
RWStructuredBuffer<float3> collisionCorrections;

// Parameters
float deltaTime;
float gravity;
float damping;
int particleCount;
int constraintCount;
float3 worldPosition;
int colliderCount;
int currentColourGroup;
float lambdaDecay;
int volumeConstraintCount;

float collisionCompliance;


// Thread group size
#define THREAD_GROUP_SIZE 64

// Utility functions for safe computation

// Checks for and corrects NaN/Infinity values in a float3
float3 ValidateFloat3(float3 v)
{
   
    if (any(isnan(v)) || any(isinf(v)))
    {
        return float3(0, 0, 0);
    }
    return v;
}

// float SafeLength(float3 v)
// {
//     float lenSq = dot(v, v);
//     return sqrt(max(lenSq, 1e-12));
// }

float SafeLength(float3 v)
{
    return length(v + 1e-9);
}

float3 SafeNormalize(float3 v)
{
    float len = SafeLength(v);
    return len > 1e-6 ? v / len : float3(0, 1, 0);
}

float3 ValidatePosition(float3 pos)
{
    // Check for NaN or infinity
    if (any(isnan(pos)) || any(isinf(pos)))
    {
        return float3(0, 1, 0); // Safe default position
    }
    
    // Clamp to reasonable world bounds
    const float MAX_WORLD_SIZE = 1000.0;
    return clamp(pos, -MAX_WORLD_SIZE, MAX_WORLD_SIZE);
}

// --- SDF Helper Functions ---

float sdf_sphere(float3 p, float3 center, float radius)
{
    return length(p - center) - radius;
}

float sdf_plane(float3 p, float3 normal, float distance)
{
    // distance is the plane's distance from the origin along its normal
    return dot(p, normal) - distance;
}

float4 quaternion_conjugate(float4 q)
{
    return float4(-q.x, -q.y, -q.z, q.w);
}

float4 quaternion_multiply(float4 q1, float4 q2)
{
    return float4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

float3 rotate_vector_by_quaternion(float3 v, float4 q)
{
    float4 q_conj = quaternion_conjugate(q);
    float4 qv = float4(v, 0);
    float4 result = quaternion_multiply(quaternion_multiply(q, qv), q_conj);
    return result.xyz;
}

// Box SDF with rotation
float sdf_box_rotated(float3 p, float3 center, float3 halfExtents, float4 rotation)
{
    // Transform point to box's local space
    float3 localP = rotate_vector_by_quaternion(p - center, quaternion_conjugate(rotation));
    float3 d = abs(localP) - halfExtents;
    float outsideDist = length(max(d, 0.0));
    float insideDist = min(max(d.x, max(d.y, d.z)), 0.0);
    return outsideDist + insideDist;
}

// Cylinder SDF with rotation (Y-axis aligned in local space)
float sdf_cylinder_rotated(float3 p, float3 center, float radius, float halfHeight, float4 rotation)
{
    // Transform point to cylinder's local space
    float3 localP = rotate_vector_by_quaternion(p - center, quaternion_conjugate(rotation));
    float2 d = float2(length(localP.xz) - radius, abs(localP.y) - halfHeight);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}



[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void IntegrateAndStorePositions(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;
    
    Particle p = particles[index];
    
    previousPositions[index] =p.positionAndInvMass.xyz;
    
    if (p.positionAndInvMass.w <= 0.0) return;
    
    float3 gravityForce = float3(0, -gravity, 0);
    float3 acceleration = gravityForce * p.positionAndInvMass.w;
    p.velocity.xyz += acceleration * deltaTime;
    
    p.velocity.xyz *= (1.0 - damping * deltaTime);

    p.positionAndInvMass.xyz += p.velocity.xyz * deltaTime;

    p.positionAndInvMass.xyz = ValidateFloat3(p.positionAndInvMass.xyz);
    p.velocity.xyz = ValidateFloat3(p.velocity.xyz);
    
    particles[index] = p;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveConstraints(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)constraintCount) return;
    
    Constraint c = constraints[index];
    
    // Only solve constraints in the current colour group
    if (c.colourGroup != currentColourGroup) return;
    
    // Load particles
    Particle pA = particles[c.particleA];
    Particle pB = particles[c.particleB];
    
    // Skip if both particles are fixed
    if (pA.positionAndInvMass.w == 0.0 && pB.positionAndInvMass.w == 0.0) return;
    
    // Calculate constraint violation
    float3 delta = pB.positionAndInvMass.xyz - pA.positionAndInvMass.xyz;
    float currentLength = SafeLength(delta);
    
    // Skip degenerate constraints
    if (currentLength < 0.0001 || c.restLength < 0.0001) return;
    
    float3 direction = delta / currentLength;
    float constraintError = currentLength - c.restLength;
    
    float dt2 = deltaTime * deltaTime;
    if (dt2 < 1e-12)
    {
        // If the timestep is effectively zero, don't solve.
        return;
    }
    float alphaTilde = c.compliance / dt2;
    
    // XPBD constraint solving
    // alphaTilde is calculated HERE using the constraint's compliance
  //  float alphaTilde = c.compliance / (deltaTime * deltaTime);
    
    // Ensure alphaTilde isn't too small
    alphaTilde = max(alphaTilde, 1e-10);
    
    // Calculate effective masses
    float wA = pA.positionAndInvMass.w;
    float wB = pB.positionAndInvMass.w;
    float totalInvMass = wA + wB;
    
    if (totalInvMass < 0.0001) return;
    
    // XPBD solving equation
    float deltaLambda = (-constraintError - alphaTilde * c.lambda) / 
                       (totalInvMass + alphaTilde + 1e-9);

    if (abs(deltaLambda) < 1e-6) return; // Skip if negligible correction
    
    // Clamp delta lambda to prevent explosions
  //  float maxCorrection = c.restLength * 0.1; // 10% of rest length
 //   deltaLambda = clamp(deltaLambda, -maxCorrection, maxCorrection);
    
    // Update accumulated lambda
    c.lambda += deltaLambda;
    
    // Optional: clamp total lambda to prevent drift
   // c.lambda = clamp(c.lambda, -100.0, 100.0);
    
    // Apply position corrections
    float3 correction = deltaLambda * direction;

    float maxCorrectionMag = c.restLength * 0.2;
    float correctionMag = length(correction);
    if (correctionMag > maxCorrectionMag)
    {
        correction = correction * (maxCorrectionMag / correctionMag);
    }
    
    if (pA.positionAndInvMass.w > 0.0)
    {
        pA.positionAndInvMass.xyz -= correction * pA.positionAndInvMass.w;
        pA.positionAndInvMass.xyz = ValidateFloat3(pA.positionAndInvMass.xyz);
    }

    if (pB.positionAndInvMass.w > 0.0)
    {
        pB.positionAndInvMass.xyz += correction * pB.positionAndInvMass.w;
        pB.positionAndInvMass.xyz = ValidateFloat3(pB.positionAndInvMass.xyz);
    }
    
    // Write back
    particles[c.particleA] = pA;
    particles[c.particleB] = pB;
    constraints[index] = c;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void UpdateMesh(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;
    
    float3 position = particles[index].positionAndInvMass.xyz;
    
    // Validate position before writing to vertex buffer
    if (any(isnan(position)) || any(isinf(position)))
    {
        // Use a safe default position
        position = float3(0, 0, 0);
    }
    
    // Convert world position to local position for mesh
    vertices[index] = position;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void DecayLambdas(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)constraintCount) return;
    
    constraints[index].lambda *= lambdaDecay;
}

[numthreads(1, 1, 1)]
void DebugAndValidateParticles(uint3 id : SV_DispatchThreadID)
{
    // debugBuffer[0].x = nanCount
    // debugBuffer[0].y = infCount
    // debugBuffer[0].z = maxSpeed
    // debugBuffer[0].w = firstBadIndex
    
    // Reset debug values
    debugBuffer[0] = float4(0, 0, 0, -1);

    int nanCount = 0;
    int infCount = 0;
    float maxSpeedSq = 0;
    int firstBadIndex = -1;

    for (uint i = 0; i < (uint)particleCount; i++)
    {
        Particle p = particles[i];
        
        // Check for NaN
        if (any(isnan(p.positionAndInvMass.xyz)) || any(isnan(p.velocity)))
        {
            nanCount++;
            if (firstBadIndex == -1) firstBadIndex = i;
        }
        
        // Check for Infinity
        if (any(isinf(p.positionAndInvMass.xyz)) || any(isinf(p.velocity)))
        {
            infCount++;
            if (firstBadIndex == -1) firstBadIndex = i;
        }

        // Check for crazy velocities
        float speedSq = dot(p.velocity, p.velocity);
        if (speedSq > maxSpeedSq)
        {
            maxSpeedSq = speedSq;
        }
    }

    debugBuffer[0].x = nanCount;
    debugBuffer[0].y = infCount;
    debugBuffer[0].z = sqrt(maxSpeedSq);
    debugBuffer[0].w = firstBadIndex;
}


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveVolumeConstraints(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)volumeConstraintCount) return; // Add volumeConstraintCount parameter

    VolumeConstraint vc = volumeConstraints[index];
    Particle p1 = particles[vc.p1];
    Particle p2 = particles[vc.p2];
    Particle p3 = particles[vc.p3];
    Particle p4 = particles[vc.p4];

    float w1 = p1.positionAndInvMass.w;
    float w2 = p2.positionAndInvMass.w;
    float w3 = p3.positionAndInvMass.w;
    float w4 = p4.positionAndInvMass.w;
    float totalInvMass = w1 + w2 + w3 + w4;
    if (totalInvMass < 0.0001) return;

    // Calculate gradients of the volume constraint
    float3 grad1 = cross(p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad2 = cross(p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad3 = cross(p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz, p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz) / 6.0;
    float3 grad4 = -grad1 - grad2 - grad3;

    // Constraint error (current volume - rest volume)
    float currentVolume = dot(p1.positionAndInvMass.xyz - p4.positionAndInvMass.xyz,
        cross(p2.positionAndInvMass.xyz - p4.positionAndInvMass.xyz,
            p3.positionAndInvMass.xyz - p4.positionAndInvMass.xyz)) / 6.0;

    float volumeRatio = currentVolume / vc.restVolume;
    float pressureFactor = vc.pressureMultiplier;

    if (volumeRatio < 1.0) //Compression
    {
        pressureFactor *= 2.0 - volumeRatio;
    }
    else
    {
        pressureFactor *= 0.5;
    }
    
    float C = currentVolume - vc.restVolume * pressureFactor;

    if (abs(C) < 0.0001 * vc.restVolume) return;

    // Clamp the constraint error to prevent explosions
    C = clamp(C, -vc.restVolume * 0.5, vc.restVolume * 0.5);
    
    // Weighted sum of squared gradient magnitudes
    float grad_sum = w1 * dot(grad1, grad1) + w2 * dot(grad2, grad2) + w3 * dot(grad3, grad3) + w4 * dot(grad4, grad4);

    float alphaTilde = vc.compliance / (deltaTime * deltaTime);
    if (grad_sum + alphaTilde < 0.0001) return;

    // Calculate delta lambda
    float deltaLambda = (-C - alphaTilde * vc.lambda) / (grad_sum + alphaTilde);
    
    vc.lambda += deltaLambda;

    // Apply corrections
    if (w1 > 0.0) p1.positionAndInvMass.xyz += w1 * deltaLambda * grad1;
    if (w2 > 0.0) p2.positionAndInvMass.xyz += w2 * deltaLambda * grad2;
    if (w3 > 0.0) p3.positionAndInvMass.xyz += w3 * deltaLambda * grad3;
    if (w4 > 0.0) p4.positionAndInvMass.xyz += w4 * deltaLambda * grad4;

    p1.positionAndInvMass.xyz = ValidatePosition(p1.positionAndInvMass.xyz);
    p2.positionAndInvMass.xyz = ValidatePosition(p2.positionAndInvMass.xyz);
    p3.positionAndInvMass.xyz = ValidatePosition(p3.positionAndInvMass.xyz);
    p4.positionAndInvMass.xyz = ValidatePosition(p4.positionAndInvMass.xyz);

    // Write back
    particles[vc.p1] = p1;
    particles[vc.p2] = p2;
    particles[vc.p3] = p3;
    particles[vc.p4] = p4;
    volumeConstraints[index] = vc;
}

// The clean, correct UpdateVelocities kernel
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void UpdateVelocities(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;

    Particle p = particles[index];
    if (p.positionAndInvMass.w <= 0.0) return;

    float3 prevPos = previousPositions[index];
    float3 newVelocity;
   
    if (deltaTime < 1e-6)
    {
        newVelocity = float3(0, 0, 0);
    }
    else
    {
        newVelocity = (p.positionAndInvMass.xyz - prevPos) / deltaTime;
    }
    
    // Optional but recommended safety clamp
    float maxSpeed = 20.0; 
    float speed = length(newVelocity);
    if (speed > maxSpeed)
    {
        newVelocity = (newVelocity / speed) * maxSpeed;
    }

    p.velocity.xyz = ValidateFloat3(newVelocity);
    particles[index] = p;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SolveGeneralCollisions(uint3 id : SV_DispatchThreadID)
{
    uint p_idx = id.x;
    if (p_idx >= (uint)particleCount) return;

    Particle p = particles[p_idx];
    if (p.positionAndInvMass.w <= 0.0) return;
    
    collisionCorrections[p_idx] = float3(0,0,0);
    float3 totalCorrection = float3(0,0,0);
    int numCollisions = 0;

    for (int c_idx = 0; c_idx < colliderCount; c_idx++)
    {
        SDFCollider c = colliders[c_idx];
        float3 pos = p.positionAndInvMass.xyz;
        float penetration = 0;
        float3 normal = float3(0,1,0);

        if (c.type == COLLIDER_TYPE_BOX)
        {
            float3 box_center = c.data1.xyz;
            float3 box_halfExtents = c.data2.xyz;
            float4 box_rotation = c.rotation;
            
            penetration = sdf_box_rotated(pos, box_center, box_halfExtents, box_rotation);
            
            if (penetration < 0.0) // Any penetration needs correction
            {
                float3 localP = rotate_vector_by_quaternion(pos - box_center, quaternion_conjugate(box_rotation));
                float3 closestPoint = clamp(localP, -box_halfExtents, box_halfExtents);
                float3 localNormal = SafeNormalize(localP - closestPoint);
                normal = rotate_vector_by_quaternion(localNormal, box_rotation);
                
                // Balanced correction - not too gentle, not too aggressive
                float correctionMagnitude;
                if (penetration < -0.05) // Deep penetration
                {
                    correctionMagnitude = min(-penetration * 0.6, 0.02); // Move out more aggressively
                }
                else // Shallow penetration
                {
                    correctionMagnitude = min(-penetration * 0.4, 0.01); // Gentler correction
                }
                
                totalCorrection += normal * correctionMagnitude;
                numCollisions++;
            }
        }
        else if (c.type == COLLIDER_TYPE_PLANE)
        {
            float3 plane_normal = c.data1.xyz;
            float plane_dist = c.data1.w;
            penetration = sdf_plane(pos, plane_normal, plane_dist);
            
            if (penetration < 0.0)
            {
                normal = plane_normal;
                
                // More aggressive for ground plane to prevent falling through
                float correctionMagnitude;
                if (penetration < -0.05)
                    correctionMagnitude = min(-penetration * 0.8, 0.03);
                else
                    correctionMagnitude = min(-penetration * 0.5, 0.015);
                    
                totalCorrection += normal * correctionMagnitude;
                numCollisions++;
            }
        }
        else if (c.type == COLLIDER_TYPE_SPHERE)
        {
            float3 center = c.data1.xyz;
            float radius = c.data1.w;
            penetration = sdf_sphere(pos, center, radius);
            
            if (penetration < 0.0)
            {
                normal = SafeNormalize(pos - center);
                float correctionMagnitude = min(-penetration * 0.5, 0.015);
                totalCorrection += normal * correctionMagnitude;
                numCollisions++;
            }
        }
    }
    
    if (numCollisions > 0)
    {
        float3 correction = totalCorrection / numCollisions;
        
        // Reasonable correction limits
        float maxCorrection = 0.01; // 1cm max per frame
        float correctionMag = length(correction);
        if (correctionMag > maxCorrection)
        {
            correction = correction * (maxCorrection / correctionMag);
        }
        
        collisionCorrections[p_idx] = correction;
    }
}
// [numthreads(THREAD_GROUP_SIZE, 1, 1)]
// void ApplyCollisionCorrections(uint3 id : SV_DispatchThreadID)
// {
//     uint p_idx = id.x;
//     if (p_idx >= (uint)particleCount) return;
//
//     float3 correction = collisionCorrections[p_idx];
//
//     if (dot(correction, correction) > 1e-8)
//     {
//         Particle p = particles[p_idx];
//         
//         // Apply position correction
//         p.positionAndInvMass.xyz += correction;
//         
//         float3 vel = p.velocity.xyz;
//         float3 normal = SafeNormalize(correction);
//         
//         // Decompose velocity
//         float normalSpeed = dot(vel, normal);
//         float3 normalVel = normal * normalSpeed;
//         float3 tangentVel = vel - normalVel;
//         
//         // Strong energy loss on collision
//         if (normalSpeed < 0) 
//         {
//             normalVel *= 0.05; // 95% energy loss
//         }
//         
//         // Strong friction on tangential velocity
//         float frictionCoeff = 0.8; 
//         tangentVel *= (1.0 - frictionCoeff);
//         
//         // Recombine with additional overall damping
//         p.velocity.xyz = (normalVel + tangentVel) * 0.9; // Additional 10% velocity loss
//         
//         particles[p_idx] = p;
//     }
// }

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void ApplyCollisionCorrections(uint3 id : SV_DispatchThreadID)
{
    uint p_idx = id.x;
    if (p_idx >= (uint)particleCount) return;

    float3 correction = collisionCorrections[p_idx];

    if (dot(correction, correction) > 1e-8)
    {
        Particle p = particles[p_idx];
        
        // Apply position correction
        p.positionAndInvMass.xyz += correction;
        
        float3 vel = p.velocity.xyz;
        float3 normal = SafeNormalize(correction);
        
        float normalSpeed = dot(vel, normal);
        
        if (normalSpeed < 0) // Moving into surface
        {
            float3 normalVel = normal * normalSpeed;
            float3 tangentVel = vel - normalVel;
            
            // Moderate energy loss - enough to prevent bouncing
            normalVel *= 0.01; 
            tangentVel *= 0.5;
            
            p.velocity.xyz = normalVel + tangentVel;
        }
        
        // additional damping
        p.velocity.xyz *= 0.8;
        
        particles[p_idx] = p;
    }
}


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void ApplyGlobalDamping(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= (uint)particleCount) return;
    
    Particle p = particles[index];
    if (p.positionAndInvMass.w <= 0.0) return;
    
    float3 pos = p.positionAndInvMass.xyz;
    float3 vel = p.velocity.xyz;
    float speed = length(vel);
    
    if (speed < 0.001) return; 
    
    // Check distance to nearest surface
    float minDistanceToSurface = 1000.0; 
    float3 surfaceNormal = float3(0, 1, 0);
    
    for (int c_idx = 0; c_idx < colliderCount; c_idx++)
    {
        SDFCollider c = colliders[c_idx];
        float distance = 1000.0;
        
        if (c.type == COLLIDER_TYPE_BOX)
        {
            distance = sdf_box_rotated(pos, c.data1.xyz, c.data2.xyz, c.rotation);
        }
        else if (c.type == COLLIDER_TYPE_PLANE)
        {
            distance = sdf_plane(pos, c.data1.xyz, c.data1.w);
        }
        else if (c.type == COLLIDER_TYPE_SPHERE)
        {
            distance = sdf_sphere(pos, c.data1.xyz, c.data1.w);
        }
        
        if (distance < minDistanceToSurface)
        {
            minDistanceToSurface = distance;
            
            // Calculate surface normal (simplified)
            if (c.type == COLLIDER_TYPE_PLANE)
            {
                surfaceNormal = c.data1.xyz;
            }
            else if (c.type == COLLIDER_TYPE_BOX)
            {
                // Simplified box normal calculation
                float3 localP = rotate_vector_by_quaternion(pos - c.data1.xyz, quaternion_conjugate(c.rotation));
                float3 closestPoint = clamp(localP, -c.data2.xyz, c.data2.xyz);
                float3 localNormal = SafeNormalize(localP - closestPoint);
                surfaceNormal = rotate_vector_by_quaternion(localNormal, c.rotation);
            }
        }
    }

    if (minDistanceToSurface < 0.05) // Within 5cm of surface
    {
        // Strong surface friction
        float contactStrength = 1.0 - saturate(minDistanceToSurface / 0.1);
        
        // Separate normal and tangential components
        float3 normalVel = dot(vel, surfaceNormal) * surfaceNormal;
        float3 tangentialVel = vel - normalVel;
        
        // Apply strong friction to tangential (sliding) motion
        float tangentialDamping = lerp(0.99, 0.7, contactStrength); // 1% to 30% loss
        tangentialVel *= tangentialDamping;
        
        // Less damping for normal motion (bouncing)
        float normalDamping = lerp(0.99, 0.8, contactStrength);
        normalVel *= normalDamping;
        
        vel = normalVel + tangentialVel;
        
        // Extra damping for spinning/rotation-like motion
        if (length(tangentialVel) > length(normalVel) * 2.0) // Mostly tangential = spinning
        {
            vel *= 0.7; // Extra 10% damping for spinning
        }
    }
    else
    {
        float dampingFactor = 0.998;
        // Air resistance only
        vel *= dampingFactor;
    }
    
    // Stop very slow motion completely
    if (length(vel) < 0.001)
    {
        vel = float3(0, 0, 0);
    }
    
    p.velocity.xyz = vel;
    particles[index] = p;
}


